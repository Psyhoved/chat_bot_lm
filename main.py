from fastapi import FastAPI
from fastapi.responses import JSONResponse
from fastapi.responses import HTMLResponse
from pydantic import BaseModel
from langchain_core.messages import HumanMessage, AIMessage

from cachetools import TTLCache

from libs.llm_chat import (create_chain, check_question, get_session_history,
                           vec_store_save_path, bk_path, check_and_make_vectorstore)
version = '0.3.0'
description = f"""
## –í–µ—Ä—Å–∏–∏
### 0.0.4
- –£–≤–µ–ª–∏—á–µ–Ω–æ –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞ —Ç–µ—Å—Ç–∞–º–∏
- –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ –±–∞–∑–æ–≤–æ–µ ci/cd –≤ github actions
- –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ—Å—Ç–∞—è html —Å—Ç—Ä–∞–Ω–∏—á–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º
### 0.1.0
- –î–æ–±–∞–≤–ª–µ–Ω—ã 9 llm –º–æ–¥–µ–ª–µ–π
- –£–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å –±–µ–∑ –ø–∞–º—è—Ç–∏ 
- –ò–∑–º–µ–Ω—ë–Ω —Å–ø–ª–∏—Ç–µ—Ä —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–∏–º–≤–æ–ª–∞–º (—Ç.–µ. –≤–æ–ø—Ä–æ—Å–∞–º)
### 0.2.0
- –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ GPT4-O mini
- –í vectorestore —É—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- –í –ø–∞–º—è—Ç—å –±–æ—Ç—É –ø–æ–ø–∞–¥–∞—é—Ç —Ç–æ–ª—å–∫–æ 3 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–æ–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞
### {version}
- –ü–µ—Ä–µ–ø–∏—Å–∞–Ω –ø–æ–∏—Å–∫ –ø–æ –ë–ó –∏ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
- –î–æ–±–∞–≤–ª–µ–Ω –≤—ã–∑–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ—Å–ª–µ 5 –≤–æ–ø—Ä–æ—Å–∞ –≥–æ—Å—Ç—è –∏ 10 –º–∏–Ω —Ç–∞–π–º–µ—Ä –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–µ—Å—Å–∏–∏
"""

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ FastAPI
app = FastAPI(
    title="–ß–∞—Ç-–±–æ—Ç API –ñ–∏–∑–Ω—å–º–∞—Ä—Ç",
    version=version,
    description=description)


# –ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
class QuestionRequest(BaseModel):
    user_id: str
    question: str


class HistoryRequest(BaseModel):
    user_id: str


# –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤–µ–∫—Ç–æ—Ä—Å—Ç–æ—Ä–∞ —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π
check_and_make_vectorstore(bk_path, vec_store_save_path)

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Ç-–±–æ—Ç–∞
chain = create_chain()

chat_start_answer      = '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –°–ø–µ—à–∏–º –Ω–∞ –ø–æ–º–æ—â—åüíö –ö–∞–∫–æ–π —É –í–∞—Å –≤–æ–ø—Ä–æ—Å?'
chat_end_answer        = '–í—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å! –ñ–µ–ª–∞–µ–º –í–∞–º –≤—Å–µ–≥–æ —Å–∞–º–æ–≥–æ –¥–æ–±—Ä–æ–≥–æ! üíö'
operator_switch_answer = '–ü–µ—Ä–µ–≤–æ–∂—É –Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞...'

# –°–æ–∑–¥–∞–µ–º –∫—ç—à —Å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º –∏ –≤—Ä–µ–º–µ–Ω–µ–º –∂–∏–∑–Ω–∏ –∑–∞–ø–∏—Å–µ–π 10 –º–∏–Ω—É—Ç
SESSION_TIMEOUT_SECONDS = 10 * 60  # 10 –º–∏–Ω—É—Ç
user_message_count = TTLCache(maxsize=10000, ttl=SESSION_TIMEOUT_SECONDS)
MAX_MESSAGES_BEFORE_OPERATOR = 5


def fast_answer(question: str):
    if question == '–æ–ø–µ—Ä–∞—Ç–æ—Ä':
        # –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤ JSONResponse
        return JSONResponse(content={"response": operator_switch_answer, 'operator': 1})
    elif question == '–ø—Ä–∏–≤–µ—Ç':
        return JSONResponse(content={"response": chat_start_answer, 'operator': 0})
    elif question == "—Å–ø–∞—Å–∏–±–æ":
        # –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –≤ JSONResponse
        return JSONResponse(content={"response": chat_end_answer, 'operator': 0})
    else:
        return None

@app.get("/", response_class=HTMLResponse)
async def serve_frontend():
    """
    –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª index.html –≤ —Ä–µ–∂–∏–º–µ —á—Ç–µ–Ω–∏—è —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π utf-8
    """
    try:
        with open("index.html", "r", encoding="utf-8") as file:
            # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            content = file.read()
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –≤ –æ—Ç–≤–µ—Ç–µ
        return HTMLResponse(content=content)
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω)
        return HTMLResponse(content=f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É\n –û—à–∏–±–∫–∞ {e}", status_code=500)


@app.post("/ask_bot")
async def ask_bot(request: QuestionRequest):
    """
    –û–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º —Å —É—á—ë—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –º–æ–¥–µ–ª—å mistralai/mistral-7b-instruct:free.
    –í –ø—Ä–æ–º—Ç –∏–¥—ë—Ç –≤—Å—è –ø—Ä–æ—à–ª–∞—è –ø–µ—Ä–µ–ø–∏—Å–∫–∞.

    :param request:

    :return:
    """
    user_id = request.user_id
    question = check_question(request.question)

    if fast_answer(question):
        return fast_answer(question)

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    count = user_message_count.get(user_id, 0)
    count += 1
    user_message_count[user_id] = count

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ 5 —Å–æ–æ–±—â–µ–Ω–∏–π, –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    if count > MAX_MESSAGES_BEFORE_OPERATOR:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫
        user_message_count.pop(user_id, None)
        return JSONResponse(content={"response": operator_switch_answer, 'operator': 1})

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –º–æ–¥–µ–ª–∏
    try:

        response_content = chain.invoke({"input": question}, config={"configurable": {"session_id": user_id}})

        return JSONResponse(content={"response": response_content['answer'].replace('\n', ''), 'operator': 0})

    except Exception as e:
        print(e)
        return JSONResponse(content={"response": operator_switch_answer, 'operator': 1})


@app.post("/get_history")
async def get_history(request: HistoryRequest):
    user_id = request.user_id
    session_history = get_session_history(user_id)

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
    messages = []
    for message in session_history.messages:
        if isinstance(message, HumanMessage):
            messages.append({"Human": message.content})
        elif isinstance(message, AIMessage):
            messages.append({"AI": message.content})

    return JSONResponse(content={'user_id': user_id, "response": messages})


# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@app.get("/version")
async def get_version():
    return {"version": version}


if __name__ == "__main__":
    import uvicorn

    uvicorn.run(app, host="0.0.0.0", port=8000, reload=True)
